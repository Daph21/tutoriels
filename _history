{"entries":[{"timestamp":1741388923326,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"servoservosetangle\"><field name=\"servo\">servos.P1</field><value name=\"degrees\"><shadow type=\"protractorPicker\"><field name=\"angle\">0</field></shadow></value></block></statement></block><block type=\"device_forever\" x=\"664\" y=\"6\"></block><block type=\"device_pin_event\" x=\"-3\" y=\"164\"><field name=\"name\">TouchPin.P0</field><statement name=\"HANDLER\"><block type=\"servoservosetangle\"><field name=\"servo\">servos.P1</field><value name=\"degrees\"><shadow type=\"protractorPicker\"><field name=\"angle\">90</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></statement></block>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":832,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"input.onPinPressed(TouchPin.P0, function () {\n    servos.P1.setAngle(90)\n    basic.pause(100)\n})\nservos.P1.setAngle(0)\nbasic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":152,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"ne\":"],[-1," \"*\",\n        \"servo\":"],[0," \"*\""]],"start1":136,"start2":136,"length1":30,"length2":8},{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"blocksprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":237,"start2":237,"length1":36,"length2":31}]}]},{"timestamp":1741389289635,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ngle(0)\n"],[1,"basic.forever(function () {\n\t\n})\n"]],"start1":111,"start2":111,"length1":8,"length2":41}]}]},{"timestamp":1741717623314,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"></block><block "],[1,"type=\"device_forever\" x=\"664\" y=\"6\"></block><block "],[0,"type=\"device_pin"]],"start1":332,"start2":332,"length1":32,"length2":83}]}]},{"timestamp":1741717623326,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":274,"start2":274,"length1":17,"length2":21}]}]},{"timestamp":1741785694839,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"Neopixel.md\""],[0,"\n   "]],"start1":246,"start2":246,"length1":31,"length2":8}]}]},{"timestamp":1741785855780,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"2"],[0,"0\" y=\""],[-1,"2"],[0,"0\"><"]],"start1":104,"start2":104,"length1":16,"length2":14},{"diffs":[[0," x=\""],[-1,"511"],[1,"-3"],[0,"\" y=\""],[-1,"20"],[1,"164"],[0,"\"><f"]],"start1":371,"start2":371,"length1":18,"length2":18}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"Sondetemperature.md\",\n        \"Potentiometre.ts\""],[0,"\n   "]],"start1":269,"start2":269,"length1":67,"length2":8}]},{"type":"added","filename":"Potentiometre.ts","value":"# Tutoriel pour l'utilisation du potentiomètre et le son\n## Step 1\nCe tutoriel te permettra de compléter la programmation afin d'utiliser un potentiomètre.\nPour commencer, garde les deux blocs bleus.\n## Step 2\nAjouter le bloc`` || music: régler le volume || `` dans le bloc`` || basic: au démarrage || `` et ajuste la valeur à 100.\n    ```blocks\nmusic.setVolume(100)\nbasic.forever(function () {\n  \n})\n\n\n```\n## Step 3\nAjoute le bloc`` || math: 0 x 0 || `` au bloc`` || variable: définir Hz à || `` et un autre bloc...\n\n\n\n\n```blocks\n\n\nlet Hz = 0\n\n\nmusic.setVolume(100)\n\n\nbasic.forever(function () {\n\n\n   Hz = 0 * (0 / 0)\n\n\n})\n```\n## Step 4\nCréer une autre variable.Celle - ci nomme - la kHz(Kilo Hertz).Ajoute le bloc`` || variable: définir kHz | ``  au bloc`` || basic: toujours | `` à la suite du bloc`` || variable: définir Hz | ``\n\n\n    ```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n   Hz = 0\n   kHz = 0\n})\n```\n## Step 5\nAjoute le bloc`` || math: 0 x 0 || `` au bloc  le bloc`` || variable: définir Hz | ``\nAjouter un deuxième bloc`` || math: 0 / 0 || ``  dans le deuxième espace.\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n   Hz = 0 * (0 / 0)\n   kHz = 0\n})\n\n\n```\n## Step 6\nAjoute le bloc`` || pins: lire la broche analogique p0 | `` dans le premier espace du bloc`` || variable: définir Hz | ``\nChange la valeur à la suite du signe de multiplication pour la valeur de 5000.\nChange la valeur à la suite du signe de division pour la valeur 1023.\n\n\n\n\n    ```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n   Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n   kHz = 0\n})\n\n\n```\n## Step 7\nAjoute le bloc`` || math: 0 / 0 || `` dans le bloc`` || variable: définir kHz | ``\nAjoute le bloc`` || variable: Hz | `` dans le premier espace du bloc.\nChange la valeur``0`` à la suite du signe de division par la valeur``1000``\n\n\n\n\n    ```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n   Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n   kHz = Hz / 1000\n})\n```\n\n\n## Step 8\nAjoute le bloc`` || basic: montrer nombre || ``\nAjoute le bloc`` || variable: Khz | `` dans le bloc`` || basic: montrer nombre || ``\n\n\n    ```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n   Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n   kHz = Hz / 1000\n   basic.showNumber(Khz)\n})\n})\n```\n## Step 9\nAjoute le bloc`` || music: lire son en arrière plan || `` à la suite de du bloc`` || basic: montrer nombre || ``\nAppuie sur le`` + `` pour avoir accès au au menu.\nAjouter le bloc`` || variable: Hz | `` dans fréquence départ et fréquence fin.\nChange la valeur de la durée à``3000``\n\n\n    ```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n   Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n   kHz = Hz / 1000\n   basic.showNumber(Khz)\n   music.playSoundEffect(music.createSoundEffect(\n   WaveShape.Sine,\n   Hz,\n   Hz,\n   255,\n   0,\n   3000,\n   SoundExpressionEffect.None,\n   InterpolationCurve.Linear\n   ), SoundExpressionPlayMode.InBackground)\n})\n```\n## Step 10\nFélicitaions!! Tu as terminé la programmation\n\n\nRéalise le branchement, télécharge le programme dans le micro: bit et tu seras prêt pour faire des tests.\n```blocks\n/Capture d'écran, le 2022-10-05 à 13.05.56.png\n})\n```\n\n\n\n"}]},{"timestamp":1741786319981,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"Potentiometre.ts","patch":[{"diffs":[[1,"# Tutoriel pour l'utilisation du potentiomètre et le son\n## Step 1\nCe tutoriel te permettra de compléter la programmation afin d'utiliser un potentiomètre.\nPour commencer, garde les deux blocs bleus.\n## Step 2\nAjouter le bloc`` || music: régler le volume || `` dans le bloc`` || basic: au démarrage || `` et ajuste la valeur à 100.\n    ```blocks\nmusic.setVolume(100)\nbasic.forever(function () {\n  \n})\n\n\n```\n## Step 3\nAjoute le bloc`` || math: 0 x 0 || `` au bloc`` || variable: définir Hz à || `` et un autre bloc...\n\n\n\n\n```blocks\n\n\nlet Hz = 0\n\n\nmusic.setVolume(100)\n\n\nbasic.forever(function () {\n\n\n   Hz = 0 * (0 / 0)\n\n\n})\n```\n## Step 4\nCréer une autre variable.Celle - ci nomme - la kHz(Kilo Hertz).Ajoute le bloc`` || variable: définir kHz | ``  au bloc`` || basic: toujours | `` à la suite du bloc`` || variable: définir Hz | ``\n\n\n    ```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n   Hz = 0\n   kHz = 0\n})\n```\n## Step 5\nAjoute le bloc`` || math: 0 x 0 || `` au bloc  le bloc`` || variable: définir Hz | ``\nAjouter un deuxième bloc`` || math: 0 / 0 || ``  dans le deuxième espace.\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n   Hz = 0 * (0 / 0)\n   kHz = 0\n})\n\n\n```\n## Step 6\nAjoute le bloc`` || pins: lire la broche analogique p0 | `` dans le premier espace du bloc`` || variable: définir Hz | ``\nChange la valeur à la suite du signe de multiplication pour la valeur de 5000.\nChange la valeur à la suite du signe de division pour la valeur 1023.\n\n\n\n\n    ```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n   Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n   kHz = 0\n})\n\n\n```\n## Step 7\nAjoute le bloc`` || math: 0 / 0 || `` dans le bloc`` || variable: définir kHz | ``\nAjoute le bloc`` || variable: Hz | `` dans le premier espace du bloc.\nChange la valeur``0`` à la suite du signe de division par la valeur``1000``\n\n\n\n\n    ```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n   Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n   kHz = Hz / 1000\n})\n```\n\n\n## Step 8\nAjoute le bloc`` || basic: montrer nombre || ``\nAjoute le bloc`` || variable: Khz | `` dans le bloc`` || basic: montrer nombre || ``\n\n\n    ```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n   Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n   kHz = Hz / 1000\n   basic.showNumber(Khz)\n})\n})\n```\n## Step 9\nAjoute le bloc`` || music: lire son en arrière plan || `` à la suite de du bloc`` || basic: montrer nombre || ``\nAppuie sur le`` + `` pour avoir accès au au menu.\nAjouter le bloc`` || variable: Hz | `` dans fréquence départ et fréquence fin.\nChange la valeur de la durée à``3000``\n\n\n    ```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n   Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n   kHz = Hz / 1000\n   basic.showNumber(Khz)\n   music.playSoundEffect(music.createSoundEffect(\n   WaveShape.Sine,\n   Hz,\n   Hz,\n   255,\n   0,\n   3000,\n   SoundExpressionEffect.None,\n   InterpolationCurve.Linear\n   ), SoundExpressionPlayMode.InBackground)\n})\n```\n## Step 10\nFélicitaions!! Tu as terminé la programmation\n\n\nRéalise le branchement, télécharge le programme dans le micro: bit et tu seras prêt pour faire des tests.\n```blocks\n/Capture d'écran, le 2022-10-05 à 13.05.56.png\n})\n```"],[0,"\n\n\n\n"]],"start1":0,"start2":0,"length1":4,"length2":3376}]}]},{"timestamp":1741786994422,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"Potentiometre.ts","patch":[{"diffs":[[-1,"# Tutoriel pour l'utilisation du potentiomètre et le son\n## Step 1\nCe tutoriel te permettra de compléter la programmation afin d'utiliser un potentiomètre.\nPour commencer, garde les deux blocs bleus.\n## Step 2\nAjouter le bloc`` || music: régler le volume || `` dans le bloc`` || basic: au démarrage || `` et ajuste la valeur à 100.\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n    Hz = 0 * (0 / 0)\n})\n\n\n\n\n    ```\n## Step 3\nAjoute le bloc ``||math: 0 x 0 ||`` au bloc  ``||variable: définir Hz à ||`` et un autre bloc...\n\n\n\n\n```blocks\n\n\nlet Hz = 0\n\n\nmusic.setVolume(100)\n\n\nbasic.forever(function () {\n\n\n    Hz = 0 * (0 / 0)\n\n\n})\n    ```\n## Step 4\nCréer une autre variable. Celle-ci nomme-la kHz (Kilo Hertz). Ajoute le bloc ``||variable:définir kHz|``  au bloc ``||basic: toujours|`` à la suite du bloc ``||variable:définir Hz|``\n\n\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\n\n\nbasic.forever(function () {\n    Hz = 0\n    kHz = 0\n})\n\n\n    ```\n## Step 5\nAjoute le bloc``||math: 0 x 0 ||`` au bloc  le bloc ``||variable:définir Hz|``\nAjouter un deuxième bloc ``||math: 0 / 0 ||``  dans le deuxième espace.\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\n\n\nbasic.forever(function () {\n    Hz = 0 * (0 / 0)\n    kHz = 0\n})\n\n\n\n\n    ```\n## Step 6\nAjoute le bloc ``||pins: lire la broche analogique p0|`` dans le premier espace du bloc ``||variable:définir Hz|``\nChange la valeur à la suite du signe de multiplication pour la valeur de 5000.\nChange la valeur à la suite du signe de division pour la valeur 1023.\n\n\n\n\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n    Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n    kHz = 0\n})\n\n\n    ```\n## Step 7\nAjoute le bloc ``||math: 0 / 0 ||`` dans le bloc ``||variable:définir kHz|``\nAjoute le bloc ``||variable: Hz|`` dans le premier espace du bloc.\nChange la valeur ``0`` à la suite du signe de division par la valeur ``1000``\n\n\n\n\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n    Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n    kHz = Hz / 1000\n})\n\n\n    ```\n\n\n## Step 8\nAjoute le bloc ``||basic: montrer nombre||``\nAjoute le bloc ``||variable: Khz|`` dans le bloc  ``||basic: montrer nombre||``\n\n\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\n\n\nbasic.forever(function () {\n    Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n    kHz = Hz / 1000\n    basic.showNumber(kHz)\n})\n\n\n    ```\n## Step 9\nAjoute le bloc ``||music: lire son en arrière plan||`` à la suite de du bloc ``||basic: montrer nombre||``\nAppuie sur le ``+`` pour avoir accès au au menu.\nAjouter le bloc ``||variable: Hz|`` dans fréquence départ et fréquence fin.\nChange la valeur de la durée à ``3000``\n\n\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\n\n\nbasic.forever(function () {\n    Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n    kHz = Hz / 1000\n    basic.showNumber(kHz)\n    music.playSoundEffect(music.createSoundEffect(\n        WaveShape.Sine,\n        Hz,\n        Hz,\n        255,\n        0,\n        3000,\n        SoundExpressionEffect.None,\n        InterpolationCurve.Linear\n    ), SoundExpressionPlayMode.InBackground)\n})\n\n\n    ```\n## Step 10\nFélicitaions!! Tu as terminé la programmation\n\n\nRéalise le branchement, télécharge le programme dans le micro:bit et tu seras prêt pour faire des tests.\n```blocks\n    / Capture d'écran, le 2022-10-05 à 13.05.56.png\n})\n```\n"],[0,"\n\n\n\n"]],"start1":0,"start2":0,"length1":3427,"length2":4}]}]},{"timestamp":1741787032680,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"ture.md\""],[1,",\n        \"Potentiometre.ts\""],[0,"\n    ],\n"]],"start1":296,"start2":296,"length1":16,"length2":44}]},{"type":"removed","filename":"Potentiometre.ts","value":"# Tutoriel pour l'utilisation du potentiomètre et le son\n## Step 1\nCe tutoriel te permettra de compléter la programmation afin d'utiliser un potentiomètre.\nPour commencer, garde les deux blocs bleus.\n## Step 2\nAjouter le bloc`` || music: régler le volume || `` dans le bloc`` || basic: au démarrage || `` et ajuste la valeur à 100.\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n    Hz = 0 * (0 / 0)\n})\n\n\n\n\n    ```\n## Step 3\nAjoute le bloc ``||math: 0 x 0 ||`` au bloc  ``||variable: définir Hz à ||`` et un autre bloc...\n\n\n\n\n```blocks\n\n\nlet Hz = 0\n\n\nmusic.setVolume(100)\n\n\nbasic.forever(function () {\n\n\n    Hz = 0 * (0 / 0)\n\n\n})\n    ```\n## Step 4\nCréer une autre variable. Celle-ci nomme-la kHz (Kilo Hertz). Ajoute le bloc ``||variable:définir kHz|``  au bloc ``||basic: toujours|`` à la suite du bloc ``||variable:définir Hz|``\n\n\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\n\n\nbasic.forever(function () {\n    Hz = 0\n    kHz = 0\n})\n\n\n    ```\n## Step 5\nAjoute le bloc``||math: 0 x 0 ||`` au bloc  le bloc ``||variable:définir Hz|``\nAjouter un deuxième bloc ``||math: 0 / 0 ||``  dans le deuxième espace.\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\n\n\nbasic.forever(function () {\n    Hz = 0 * (0 / 0)\n    kHz = 0\n})\n\n\n\n\n    ```\n## Step 6\nAjoute le bloc ``||pins: lire la broche analogique p0|`` dans le premier espace du bloc ``||variable:définir Hz|``\nChange la valeur à la suite du signe de multiplication pour la valeur de 5000.\nChange la valeur à la suite du signe de division pour la valeur 1023.\n\n\n\n\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n    Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n    kHz = 0\n})\n\n\n    ```\n## Step 7\nAjoute le bloc ``||math: 0 / 0 ||`` dans le bloc ``||variable:définir kHz|``\nAjoute le bloc ``||variable: Hz|`` dans le premier espace du bloc.\nChange la valeur ``0`` à la suite du signe de division par la valeur ``1000``\n\n\n\n\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\nbasic.forever(function () {\n    Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n    kHz = Hz / 1000\n})\n\n\n    ```\n\n\n## Step 8\nAjoute le bloc ``||basic: montrer nombre||``\nAjoute le bloc ``||variable: Khz|`` dans le bloc  ``||basic: montrer nombre||``\n\n\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\n\n\nbasic.forever(function () {\n    Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n    kHz = Hz / 1000\n    basic.showNumber(kHz)\n})\n\n\n    ```\n## Step 9\nAjoute le bloc ``||music: lire son en arrière plan||`` à la suite de du bloc ``||basic: montrer nombre||``\nAppuie sur le ``+`` pour avoir accès au au menu.\nAjouter le bloc ``||variable: Hz|`` dans fréquence départ et fréquence fin.\nChange la valeur de la durée à ``3000``\n\n\n```blocks\nlet kHz = 0\nlet Hz = 0\nmusic.setVolume(100)\n\n\nbasic.forever(function () {\n    Hz = pins.analogReadPin(AnalogPin.P0) * (5000 / 1023)\n    kHz = Hz / 1000\n    basic.showNumber(kHz)\n    music.playSoundEffect(music.createSoundEffect(\n        WaveShape.Sine,\n        Hz,\n        Hz,\n        255,\n        0,\n        3000,\n        SoundExpressionEffect.None,\n        InterpolationCurve.Linear\n    ), SoundExpressionPlayMode.InBackground)\n})\n\n\n    ```\n## Step 10\nFélicitaions!! Tu as terminé la programmation\n\n\nRéalise le branchement, télécharge le programme dans le micro:bit et tu seras prêt pour faire des tests.\n```blocks\n    / Capture d'écran, le 2022-10-05 à 13.05.56.png\n})\n```\n\n\n\n\n"}]},{"timestamp":1741787052774,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"T"],[1,"miniputtservo"],[0,"\",\n "]],"start1":11,"start2":11,"length1":9,"length2":21}]}]},{"timestamp":1741787780289,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"ame\": \"T"],[-1,"u"],[0,"\",\n    \""]],"start1":8,"start2":8,"length1":17,"length2":16}]}]},{"timestamp":1741787780817,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"Tu"],[-1,"toriels"],[0,"\",\n "]],"start1":13,"start2":13,"length1":15,"length2":8},{"diffs":[[0,".md\""],[-1,",\n        \"potentiometre.ts\",\n        \"CapteurHumidite.ts\""],[0,"\n   "]],"start1":289,"start2":289,"length1":66,"length2":8}]},{"type":"added","filename":"potentiometre.ts","value":"\n/**\n* Utilisez ce fichier pour définir des fonctions et des blocs personnalisés.\n* En savoir plus à https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"},{"type":"added","filename":"CapteurHumidite.ts","value":"# Tutoriel pour l'utilisation du capteur d'humidité\n## Step 1\nCe tutoriel te permettra de compléter la programmation afin d'utiliser un capteur d'humidité.\nPour commencer, Élimine le bloc`` || basic: au démarrage || ``\n## Step 2\nCrée la variable humidité et ajoute le  bloc`` || variable: définir humidité || `` dans le bloc`` || basic: toujours || ``\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = 0\n})\n\n```\n## Step 3\nAjoute le bloc`` || pins: lire la broche analogique P1 || `` au bloc`` || variable: définir humidité || ``\n\n\n    ```blocks\n\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n})\n\n\n```\n## Step 4\nAjoute le bloc loc`` || logic: si alors sinon || `` sous le bloc`` || pins: lire la broche analogique P1 || ``\n\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (true) {\n      \n   } else {\n      \n   }\n})\n\n```\n## Step 5\nAjoute le bloc`` || logic: 0 > 0 || `` dans l'espace \"vrai\"\nAjoute le bloc`` || variable: humidité || `` dans le premier espace et change la valeur numérique à 300 dans le 2e espace.\n\n```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (humidite > 300) {\n      \n   } else {\n      \n   }\n})\n\n\n```\n## Step 6\nAjoute le bloc`` || basic: montrer l'icône||``sous le bloc ``||logic: si alors ||``\net choisis le symbole coeur.\nAjoute un autre bloc`` || basic: montrer l'icône||`` sous le bloc ``||logic: sinon ||``\net choisis le symbole x\n\n\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (humidite > 300) {\n       basic.showIcon(IconNames.Heart)\n   } else {\n       basic.showIcon(IconNames.No)\n   }\n})\n\n\n\n```\n## Step 7\nAjoute le bloc`` || serial: écrire la ligne || ``sous le bloc`` || logic: si alors sinon || ``\n\n\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (humidite > 300) {\n       basic.showIcon(IconNames.Heart)\n   } else {\n       basic.showIcon(IconNames.No)\n   }\n   serial.writeLine(\"\")\n})\n```\n## Step 8\nAjoute le bloc`` || pins: lire la broche analogique P1 || `` dans le bloc`` || serial: écrire la ligne || ``\nAjoute le bloc`` || basic: pause(ms) || `` et ajuste la valeur à 10000.\n\n\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (humidite > 300) {\n       basic.showIcon(IconNames.Heart)\n   } else {\n       basic.showIcon(IconNames.No)\n   }\n   serial.writeLine(\"\" + (pins.analogReadPin(AnalogPin.P1)))\n   basic.pause(10000)\n})\n```\n## Step 8\nFélicitaions!! Tu as terminé la programmation de ce défi.\n\nRéalise le branchement, télécharge le programme dans le micro: bit et tu seras prêt pour faire des tests.\n```blocks\n/Capture d'écran, le 2022-10-05 à 13.05.56.png\n})\n```"}]},{"timestamp":1741788043235,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".ts\""],[-1,",\n        \"Interplevier.md\""],[0,"\n   "]],"start1":354,"start2":354,"length1":35,"length2":8}]}]},{"timestamp":1741792697521,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"CapteurHumidite.ts","patch":[{"diffs":[[1,"# Tutoriel pour l'utilisation du capteur d'humidité\n## Step 1\nCe tutoriel te permettra de compléter la programmation afin d'utiliser un capteur d'humidité.\nPour commencer, Élimine le bloc`` || basic: au démarrage || ``\n## Step 2\nCrée la variable humidité et ajoute le  bloc`` || variable: définir humidité || `` dans le bloc`` || basic: toujours || ``\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = 0\n})\n\n```\n## Step 3\nAjoute le bloc`` || pins: lire la broche analogique P1 || `` au bloc`` || variable: définir humidité || ``\n\n\n    ```blocks\n\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n})\n\n\n```\n## Step 4\nAjoute le bloc loc`` || logic: si alors sinon || `` sous le bloc`` || pins: lire la broche analogique P1 || ``\n\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (true) {\n      \n   } else {\n      \n   }\n})\n\n```\n## Step 5\nAjoute le bloc`` || logic: 0 > 0 || `` dans l'espace \"vrai\"\nAjoute le bloc`` || variable: humidité || `` dans le premier espace et change la valeur numérique à 300 dans le 2e espace.\n\n```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (humidite > 300) {\n      \n   } else {\n      \n   }\n})\n\n\n```\n## Step 6\nAjoute le bloc`` || basic: montrer l'icône||``sous le bloc ``||logic: si alors ||``\net choisis le symbole coeur.\nAjoute un autre bloc`` || basic: montrer l'icône||`` sous le bloc ``||logic: sinon ||``\net choisis le symbole x\n\n\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (humidite > 300) {\n       basic.showIcon(IconNames.Heart)\n   } else {\n       basic.showIcon(IconNames.No)\n   }\n})\n\n\n\n```\n## Step 7\nAjoute le bloc`` || serial: écrire la ligne || ``sous le bloc`` || logic: si alors sinon || ``\n\n\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (humidite > 300) {\n       basic.showIcon(IconNames.Heart)\n   } else {\n       basic.showIcon(IconNames.No)\n   }\n   serial.writeLine(\"\")\n})\n```\n## Step 8\nAjoute le bloc`` || pins: lire la broche analogique P1 || `` dans le bloc`` || serial: écrire la ligne || ``\nAjoute le bloc`` || basic: pause(ms) || `` et ajuste la valeur à 10000.\n\n\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (humidite > 300) {\n       basic.showIcon(IconNames.Heart)\n   } else {\n       basic.showIcon(IconNames.No)\n   }\n   serial.writeLine(\"\" + (pins.analogReadPin(AnalogPin.P1)))\n   basic.pause(10000)\n})\n```\n## Step 8\nFélicitaions!! Tu as terminé la programmation de ce défi.\n\nRéalise le branchement, télécharge le programme dans le micro: bit et tu seras prêt pour faire des tests.\n```blocks\n/Capture d'écran, le 2022-10-05 à 13.05.56.png\n})\n```"]],"start1":0,"start2":0,"length1":0,"length2":2890}]}]},{"timestamp":1741793011377,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"servoservosetangle\"><field name=\"servo\">servos.P1</field><value name=\"degrees\"><shadow type=\"protractorPicker\"><field name=\"angle\">0</field></shadow></value></block></statement></block><block type=\"device_pin_event\" x=\"511\" y=\"20\"><field name=\"name\">TouchPin.P0</field><statement name=\"HANDLER\"><block type=\"servoservosetangle\"><field name=\"servo\">servos.P1</field><value name=\"degrees\"><shadow type=\"protractorPicker\"><field name=\"angle\">90</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></statement></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":726}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"s\",\n"],[-1,"        \"Interplevier.md\",\n"],[0,"    "]],"start1":326,"start2":326,"length1":35,"length2":8},{"diffs":[[0,"umidite."],[-1,"md"],[1,"ts"],[0,"\",\n     "]],"start1":347,"start2":347,"length1":18,"length2":18},{"diffs":[[0,"   \""],[-1,"Potentiometre.md\"\n    ],\n    \"testFiles\": [\n        \"test.ts"],[1,"Interplevier.md"],[0,"\"\n  "]],"start1":365,"start2":365,"length1":68,"length2":23}]},{"type":"removed","filename":"CapteurHumidite.ts","value":""},{"type":"added","filename":"test.ts","value":"// les tests vont ici ; cela ne sera pas compilé si ce paquet est utilisé en tant qu'extension.\n"}]}],"snapshots":[{"timestamp":1741388923325,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"miniputtservo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1741717623314,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"servoservosetangle\"><field name=\"servo\">servos.P1</field><value name=\"degrees\"><shadow type=\"protractorPicker\"><field name=\"angle\">0</field></shadow></value></block></statement></block><block type=\"device_forever\" x=\"664\" y=\"6\"></block><block type=\"device_pin_event\" x=\"-3\" y=\"164\"><field name=\"name\">TouchPin.P0</field><statement name=\"HANDLER\"><block type=\"servoservosetangle\"><field name=\"servo\">servos.P1</field><value name=\"degrees\"><shadow type=\"protractorPicker\"><field name=\"angle\">90</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"miniputtservo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"servo\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1741785694839,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"servoservosetangle\"><field name=\"servo\">servos.P1</field><value name=\"degrees\"><shadow type=\"protractorPicker\"><field name=\"angle\">0</field></shadow></value></block></statement></block><block type=\"device_pin_event\" x=\"-3\" y=\"164\"><field name=\"name\">TouchPin.P0</field><statement name=\"HANDLER\"><block type=\"servoservosetangle\"><field name=\"servo\">servos.P1</field><value name=\"degrees\"><shadow type=\"protractorPicker\"><field name=\"angle\">90</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"miniputtservo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"servo\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1741787780289,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"servoservosetangle\"><field name=\"servo\">servos.P1</field><value name=\"degrees\"><shadow type=\"protractorPicker\"><field name=\"angle\">0</field></shadow></value></block></statement></block><block type=\"device_pin_event\" x=\"511\" y=\"20\"><field name=\"name\">TouchPin.P0</field><statement name=\"HANDLER\"><block type=\"servoservosetangle\"><field name=\"servo\">servos.P1</field><value name=\"degrees\"><shadow type=\"protractorPicker\"><field name=\"angle\">90</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"input.onPinPressed(TouchPin.P0, function () {\n    servos.P1.setAngle(90)\n    basic.pause(100)\n})\nservos.P1.setAngle(0)\n","README.md":"","Neopixel.md":"# Tutoriel neopixels\n# Step 1\nCe tutoriel te permettra de compléter la programmation des néopixels.\nPour commencer, garde les deux blocs bleus.\n\n\n\n\n## Step 2\nDans l'extension neopixel, sélectionne  ``||variable: définir||`` ``||neopixel: NeoPixel sur||`` et ajoute le au bloc ``||basic: au démarrage||``\nChange la valeur du ``||pins:P0||`` à ``||pins:P1||`` et change la valeur de 24 pour 8 .\n\n\n```package\n\n\nneopixel=github:microsoft/pxt-neopixel\n```\n```blocks\nlet strip = neopixel.create(DigitalPin.P1, 8, NeoPixelMode.RGB)\nbasic.forever(function () {\n  \n})\n```\n\n\n## Step 3\nAjoute le bloc ``||neopixel:régler luminosité||``  à la suite  dans le bloc ``||basic: au démarrage||`` et régle la luminosité a 30\n\n\n```blocks\nlet strip = neopixel.create(DigitalPin.P1, 8, NeoPixelMode.RGB)\nstrip.setBrightness(30)\nbasic.forever(function () {\n  \n})\n```\n\n\n\n\n## Step 4\nAjoute le bloc ``||neopixel: afficher arc-en-ciel||``\n\n\n```blocks\nlet strip = neopixel.create(DigitalPin.P1, 8, NeoPixelMode.RGB)\nstrip.setBrightness(30)\nstrip.showRainbow(1, 360)\nbasic.forever(function () {\n  \n})\n```\n\n\n## Step 5\n\n\nDans le bloc``||basic: toujours||`` ajoute le bloc ``||neopixel: pivoter||``\n\n\n```blocks\nlet strip = neopixel.create(DigitalPin.P1, 8, NeoPixelMode.RGB)\nstrip.setBrightness(30)\nstrip.showRainbow(1, 360)\nbasic.forever(function () {\n   strip.rotate(1)\n})\n\n\n```\n\n\n## Step 6\nAjoute le bloc``||neopixel:montrer||``  puis  ajoute une pause de 200 ms = ``||basic: pause (ms) 200||`` dans le bloc ``||basic: toujours||``\n\n\n```blocks\nlet strip = neopixel.create(DigitalPin.P1, 8, NeoPixelMode.RGB)\nstrip.setBrightness(30)\nstrip.showRainbow(1, 360)\nbasic.forever(function () {\n   strip.rotate(1)\n   strip.show()\n   basic.pause(200)\n})\n```\n## Step 7\n\n\nRéalise le branchement, télécharge le programme dans le micro:bit et tu seras prêt pour faire des tests.\n```blocks\n/Capture d'écran, le 2022-10-05 à 13.05.56.png\n})\n```\n","Sondetemperature.md":"Tuto Sonde - Github\n\n\n# Tutoriel pour l'utilisation de la sonde de température DS18B20\n\n\n\n## Step 1\n\n\n\nSupprime le bloc ``||basic: au démarrage||``\n\n\n\n## Step 2\n\n\n\nCrée une variable ``||variable: temperature||`` et ajoute le bloc ``||variable: définir temperature à ||`` dans la boucle ``||basic: toujours||``\n\n\n\n```blocks\n\n\nlet temperature = 0\n\n\nbasic.forever(function () {\n\n\n    temperature = 0\n\n\n})\n\n\n```\n\n\n\n## Step 3\n\n\n\nDans l'extension DS Temp, sélectionne ``||dstemp:temperature (C) on P0||`` et le placer dans le bloc  ``||variable: définir temperature à ...||``\n\n\nLe schéma de branchement du capteur de température va apparaître dans le simulateur.\n\n\n\n```package\n\n\ndstemp=github:bsiever/microbit-dstemp\n\n\n```\n\n\n```blocks\n\n\nlet temperature = 0\n\n\nbasic.forever(function () {\n\n\n    temperature = dstemp.celsius(DigitalPin.P0)\n\n\n})\n\n\n```\n\n\n\n## Step 4\n\n\n\nEn utilisant les blocs logique, ajoute ``||logic: si||`` ``||variable: temperature||``  ``||logic: > -300 alors ||``\n\n\n\n```blocks\n\n\nlet temperature = 0\n\n\nbasic.forever(function () {\n\n\n    temperature = dstemp.celsius(DigitalPin.P0)\n\n\n    if (temperature > -300) {\n\n\n       \n\n\n    }\n\n\n})\n\n\n```\n\n\n\n## Step 5\n\n\n\nAvec le bloc de Communication Série ``||serial: série écrire valeur ||`` inscrire \"T\" = ``||variable: temperature||`` dans le si\n\n\n\n```blocks\n\n\nlet temperature = 0\n\n\nbasic.forever(function () {\n\n\n    temperature = dstemp.celsius(DigitalPin.P0)\n\n\n    if (temperature > -300) {\n\n\n        serial.writeValue(\"T\", temperature)\n\n\n    }\n\n\n})\n\n\n```\n\n\n\n## Step 6\n\n\n\nAjoute une pause de 1 s = ``||basic: pause (ms) 1000||`` après le si\n\n\n\n```blocks\n\n\nlet temperature = 0\n\n\nbasic.forever(function () {\n\n\n    temperature = dstemp.celsius(DigitalPin.P0)\n\n\n    if (temperature > -300) {\n\n\n        serial.writeValue(\"T\", temperature)\n\n\n    }\n\n\n    basic.pause(1000)\n\n\n})\n\n\n```\n\n\n## Step 7\n\n\n\nRéalise le branchement, télécharge le programme dans le micro:bit et tu seras prêt pour faire des tests.\n\n","pxt.json":"{\n    \"name\": \"miniputtservo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"servo\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"Neopixel.md\",\n        \"Sondetemperature.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1741792686732,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"servoservosetangle\"><field name=\"servo\">servos.P1</field><value name=\"degrees\"><shadow type=\"protractorPicker\"><field name=\"angle\">0</field></shadow></value></block></statement></block><block type=\"device_pin_event\" x=\"511\" y=\"20\"><field name=\"name\">TouchPin.P0</field><statement name=\"HANDLER\"><block type=\"servoservosetangle\"><field name=\"servo\">servos.P1</field><value name=\"degrees\"><shadow type=\"protractorPicker\"><field name=\"angle\">90</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"input.onPinPressed(TouchPin.P0, function () {\n    servos.P1.setAngle(90)\n    basic.pause(100)\n})\nservos.P1.setAngle(0)\n","README.md":"","Neopixel.md":"# Tutoriel neopixels\n# Step 1\nCe tutoriel te permettra de compléter la programmation des néopixels.\nPour commencer, garde les deux blocs bleus.\n\n\n\n\n## Step 2\nDans l'extension neopixel, sélectionne  ``||variable: définir||`` ``||neopixel: NeoPixel sur||`` et ajoute le au bloc ``||basic: au démarrage||``\nChange la valeur du ``||pins:P0||`` à ``||pins:P1||`` et change la valeur de 24 pour 8 .\n\n\n```package\n\n\nneopixel=github:microsoft/pxt-neopixel\n```\n```blocks\nlet strip = neopixel.create(DigitalPin.P1, 8, NeoPixelMode.RGB)\nbasic.forever(function () {\n  \n})\n```\n\n\n## Step 3\nAjoute le bloc ``||neopixel:régler luminosité||``  à la suite  dans le bloc ``||basic: au démarrage||`` et régle la luminosité a 30\n\n\n```blocks\nlet strip = neopixel.create(DigitalPin.P1, 8, NeoPixelMode.RGB)\nstrip.setBrightness(30)\nbasic.forever(function () {\n  \n})\n```\n\n\n\n\n## Step 4\nAjoute le bloc ``||neopixel: afficher arc-en-ciel||``\n\n\n```blocks\nlet strip = neopixel.create(DigitalPin.P1, 8, NeoPixelMode.RGB)\nstrip.setBrightness(30)\nstrip.showRainbow(1, 360)\nbasic.forever(function () {\n  \n})\n```\n\n\n## Step 5\n\n\nDans le bloc``||basic: toujours||`` ajoute le bloc ``||neopixel: pivoter||``\n\n\n```blocks\nlet strip = neopixel.create(DigitalPin.P1, 8, NeoPixelMode.RGB)\nstrip.setBrightness(30)\nstrip.showRainbow(1, 360)\nbasic.forever(function () {\n   strip.rotate(1)\n})\n\n\n```\n\n\n## Step 6\nAjoute le bloc``||neopixel:montrer||``  puis  ajoute une pause de 200 ms = ``||basic: pause (ms) 200||`` dans le bloc ``||basic: toujours||``\n\n\n```blocks\nlet strip = neopixel.create(DigitalPin.P1, 8, NeoPixelMode.RGB)\nstrip.setBrightness(30)\nstrip.showRainbow(1, 360)\nbasic.forever(function () {\n   strip.rotate(1)\n   strip.show()\n   basic.pause(200)\n})\n```\n## Step 7\n\n\nRéalise le branchement, télécharge le programme dans le micro:bit et tu seras prêt pour faire des tests.\n```blocks\n/Capture d'écran, le 2022-10-05 à 13.05.56.png\n})\n```\n","Sondetemperature.md":"Tuto Sonde - Github\n\n\n# Tutoriel pour l'utilisation de la sonde de température DS18B20\n\n\n\n## Step 1\n\n\n\nSupprime le bloc ``||basic: au démarrage||``\n\n\n\n## Step 2\n\n\n\nCrée une variable ``||variable: temperature||`` et ajoute le bloc ``||variable: définir temperature à ||`` dans la boucle ``||basic: toujours||``\n\n\n\n```blocks\n\n\nlet temperature = 0\n\n\nbasic.forever(function () {\n\n\n    temperature = 0\n\n\n})\n\n\n```\n\n\n\n## Step 3\n\n\n\nDans l'extension DS Temp, sélectionne ``||dstemp:temperature (C) on P0||`` et le placer dans le bloc  ``||variable: définir temperature à ...||``\n\n\nLe schéma de branchement du capteur de température va apparaître dans le simulateur.\n\n\n\n```package\n\n\ndstemp=github:bsiever/microbit-dstemp\n\n\n```\n\n\n```blocks\n\n\nlet temperature = 0\n\n\nbasic.forever(function () {\n\n\n    temperature = dstemp.celsius(DigitalPin.P0)\n\n\n})\n\n\n```\n\n\n\n## Step 4\n\n\n\nEn utilisant les blocs logique, ajoute ``||logic: si||`` ``||variable: temperature||``  ``||logic: > -300 alors ||``\n\n\n\n```blocks\n\n\nlet temperature = 0\n\n\nbasic.forever(function () {\n\n\n    temperature = dstemp.celsius(DigitalPin.P0)\n\n\n    if (temperature > -300) {\n\n\n       \n\n\n    }\n\n\n})\n\n\n```\n\n\n\n## Step 5\n\n\n\nAvec le bloc de Communication Série ``||serial: série écrire valeur ||`` inscrire \"T\" = ``||variable: temperature||`` dans le si\n\n\n\n```blocks\n\n\nlet temperature = 0\n\n\nbasic.forever(function () {\n\n\n    temperature = dstemp.celsius(DigitalPin.P0)\n\n\n    if (temperature > -300) {\n\n\n        serial.writeValue(\"T\", temperature)\n\n\n    }\n\n\n})\n\n\n```\n\n\n\n## Step 6\n\n\n\nAjoute une pause de 1 s = ``||basic: pause (ms) 1000||`` après le si\n\n\n\n```blocks\n\n\nlet temperature = 0\n\n\nbasic.forever(function () {\n\n\n    temperature = dstemp.celsius(DigitalPin.P0)\n\n\n    if (temperature > -300) {\n\n\n        serial.writeValue(\"T\", temperature)\n\n\n    }\n\n\n    basic.pause(1000)\n\n\n})\n\n\n```\n\n\n## Step 7\n\n\n\nRéalise le branchement, télécharge le programme dans le micro:bit et tu seras prêt pour faire des tests.\n\n","potentiometre.ts":"\n/**\n* Utilisez ce fichier pour définir des fonctions et des blocs personnalisés.\n* En savoir plus à https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","CapteurHumidite.ts":"# Tutoriel pour l'utilisation du capteur d'humidité\n## Step 1\nCe tutoriel te permettra de compléter la programmation afin d'utiliser un capteur d'humidité.\nPour commencer, Élimine le bloc`` || basic: au démarrage || ``\n## Step 2\nCrée la variable humidité et ajoute le  bloc`` || variable: définir humidité || `` dans le bloc`` || basic: toujours || ``\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = 0\n})\n\n```\n## Step 3\nAjoute le bloc`` || pins: lire la broche analogique P1 || `` au bloc`` || variable: définir humidité || ``\n\n\n    ```blocks\n\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n})\n\n\n```\n## Step 4\nAjoute le bloc loc`` || logic: si alors sinon || `` sous le bloc`` || pins: lire la broche analogique P1 || ``\n\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (true) {\n      \n   } else {\n      \n   }\n})\n\n```\n## Step 5\nAjoute le bloc`` || logic: 0 > 0 || `` dans l'espace \"vrai\"\nAjoute le bloc`` || variable: humidité || `` dans le premier espace et change la valeur numérique à 300 dans le 2e espace.\n\n```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (humidite > 300) {\n      \n   } else {\n      \n   }\n})\n\n\n```\n## Step 6\nAjoute le bloc`` || basic: montrer l'icône||``sous le bloc ``||logic: si alors ||``\net choisis le symbole coeur.\nAjoute un autre bloc`` || basic: montrer l'icône||`` sous le bloc ``||logic: sinon ||``\net choisis le symbole x\n\n\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (humidite > 300) {\n       basic.showIcon(IconNames.Heart)\n   } else {\n       basic.showIcon(IconNames.No)\n   }\n})\n\n\n\n```\n## Step 7\nAjoute le bloc`` || serial: écrire la ligne || ``sous le bloc`` || logic: si alors sinon || ``\n\n\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (humidite > 300) {\n       basic.showIcon(IconNames.Heart)\n   } else {\n       basic.showIcon(IconNames.No)\n   }\n   serial.writeLine(\"\")\n})\n```\n## Step 8\nAjoute le bloc`` || pins: lire la broche analogique P1 || `` dans le bloc`` || serial: écrire la ligne || ``\nAjoute le bloc`` || basic: pause(ms) || `` et ajuste la valeur à 10000.\n\n\n    ```blocks\nlet humidite = 0\nbasic.forever(function () {\n   humidite = pins.analogReadPin(AnalogPin.P1)\n   if (humidite > 300) {\n       basic.showIcon(IconNames.Heart)\n   } else {\n       basic.showIcon(IconNames.No)\n   }\n   serial.writeLine(\"\" + (pins.analogReadPin(AnalogPin.P1)))\n   basic.pause(10000)\n})\n```\n## Step 8\nFélicitaions!! Tu as terminé la programmation de ce défi.\n\nRéalise le branchement, télécharge le programme dans le micro: bit et tu seras prêt pour faire des tests.\n```blocks\n/Capture d'écran, le 2022-10-05 à 13.05.56.png\n})\n```","pxt.json":"{\n    \"name\": \"Tutoriels\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"servo\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"Neopixel.md\",\n        \"Sondetemperature.md\",\n        \"potentiometre.ts\",\n        \"CapteurHumidite.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1741793361859}